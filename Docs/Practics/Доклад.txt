-1-1-1- Звіт з переддипломної практики -1-1-1-
 
Звіт з переддипломної практики на тему "Розробка системи генерації складних поверхонь з використанням псевдовипадкових шумів".
Виконав студент групи ПА-19-2, Ільяшенко Єгор Віталійович
Куратор: Степанова Наталія Іванівна

-2-2-2- Вступ -2-2-2-

У сучасному світі тривимірна комп'ютерна графіка використовується в багатьох сферах життя. Прикладами можуть стати ігрова індустрія, фільморежисирування, різноманітні симуляції. 
Одне з ключових завдань тривимірного графічного дизайну - це створення реалістичних і деталізованих поверхонь. Поверхні бувають як у 3Д моделей, які складаються з набору тривимірних координат і з'єднань між ними, так і поверхні ландшафту.

-3-3-3- Ландшафтні поверхні -3-3-3-

У цій роботі я працював над генерацією ландшафтних поверхонь. Такі поверхні найчастіше складаються з двовимірного масиву значень, які відображають висоту ландшафту в координаті, в якій це значення записано. 

Класичний спосіб створення ландшафтної поверхні - це вибрати розмірність двовимірного масиву і заповнити всі значення власноруч. Зараз існує безліч інструментів, які спрощують процес створення таких карт висот. Вони зводять процес заповнення значень до заповнення наборами за допомогою пензлів. Такі карти висот потім зберігаються в пам'яті і можуть бути використаними в будь-який момент, шляхом завантаження цих значень із файлу і переведення їх у висоти на площині. 

Але такий підхід має безліч недоліків. Кожну поверхню, яку ми захочемо використати, спочатку потрібно намалювати власноруч, що вимагає дуже багато роботи, якщо ми хочемо отримати хоч якусь варіативність ландшафту. Більш того, алгоритм зчитування таких даних має квадратичну складність, бо поверхня має дві осі координат, кількість точок по кожній з яких - підвищується при збільшенні деталізації. За малої деталізації поверхні, або малого її розміру - це не відіграє великої ролі, але якщо ми хочемо захопити справді велику ділянку - це стає великою проблемою. Створення таких поверхонь стає дуже ресурсовитратним або зовсім неможливим. 

Наприклад, для створення поверхні планети, яку можна порівняти із Землею, з точністю хоча б одна точка висоти на квадратний кілометр поверхні - знадобиться 510-065-700 точок висот, які займуть 11.4 Гб пам'яті, з розрахунку, що одна точка містить 3 координати, кожна з яких містить 8 байт інформації.

-4-4-4- Процедурна генерація -4-4-4-

Альтернативний варіант створення ландшафту, який розв'язує всі перераховані вище проблеми - це процедурна генерація. Це набагато складніший процес, ніж намалювати статичну карту висот, і вимагає багато роботи і планування для того, щоб отримати хоч якийсь прийнятний результат. Але в підсумку ми отримаємо систему генерації ландшафту - яку можна налаштувати за бажанням і яка має дуже багато переваг перед класичним варіантом побудови поверхонь, серед яких найосновніші - це:
	1)	Замість зберігання всіх точок поверхні - ми зберігаємо одне значення розміром у декілька байт - так званий seed планети.
	2)	Можливість генерації ландшафту будь-якої складності. 
	3)	Можливість генерувати поверхню на льоту. А для того, щоб отримати зовсім інший ландшафт - досить поміняти одне значення - той самий seed. 
	4) Та можливість генерації близько-нескінченних світів.

Після того, як ми отримали seed планети, ми можемо почати генерувати карту висот у ділянці, яка має відображатися на екрані. Але, просто генерувати псевдовипадкові числа - недостатньо, нам потрібен спосіб інтерполяції висот. Для досягнення цих цілей доцільно використовувати псевдовипадкові шуми.

-5-5-5- Псевдовипадкові шуми -5-5-5-

Псевдовипадковий шум - це послідовність чисел, які здаються випадковими, але насправді повністю детерміновані. Такі шуми беруть псевдовипадкові значення в деяких точках площини, решта ж значень заповнюються за алгоритмом. Є багато різних алгоритмів побудови псевдовипадкового шуму, найвідоміші з яких - це шум Перліна, шум Вороного, Simplex і OpenSimplex шуми.
 
Псевдовипадкові шуми і маніпуляції над ними - це один із найважливіших аспектів розробки системи генерації складних поверхонь. Існує дуже багато методів фільтрації, модифікації та об'єднання шумів, що дає змогу досягти необхідної якості та деталізації згенерованих поверхонь. 

-6-6-6- Шум Перліна -6-6-6-

Шум Перліна (Perlin noise) - це вид псевдовипадкового шуму, що використовується для моделювання нерегулярних текстур, таких як поверхні, хмари, вогні та інше. Шум Перліна генерується за допомогою інтерполяції градієнтів у випадкових точках сітки. Шум Перліна може бути будь якої розмірності, але зазвичай реалізується, як двовимірна, або тривимірна функція. У моєму випадку я буду використовувати тривимірний шум Перліна, бо генерації поверхні буде виконуватися у тривимірному просторі.
Реалізації шуму Перліна проводиться в декілька етапів:
	1.	Спочатку ми визначаємо n-вимірну сітку, де кожній координаті сітки присвоюється n-вимірний вектор (градієнт). Цей вектор рандомізують за допомогою псевдо-випадкової послідовності, використовуючи координату сітки – як seed.  Надалі, його потрібно нормалізувати.
	2.	Другий крок – це визначити, до якої комірки у нашій сітці потрапляє точка, значення якої треба знайти.
	3.	Для кожного вузла комірки визначаємо вектор відстані між точкою та координатами вузла.
	4.	Надалі обчислюємо скалярні добутки векторів відстані та градієнтних векторів кожного вузла комірки.
	5.	Значення скалярних добутків інтерполюються і ми отримуємо фінальну точку шуму у потрібній координаті.
	
Така процедура повторюється для кожної точки, яку нам потрібно визначити.

-7-7-7- Розподілення точок на сфері -7-7-7-

Для того, щоб знайти карту висот на сфері, потрібно спочатку побудувати сітку вершин (mesh), які і будуть висотами. Є декілька способів побудови меша сфери, серед яких основні:
	1)	UV-сфера, яка найчастіше використовується для накладання UV розгортки текстур. Основний підхід полягає в теселяції сфери по мередіанам та паралелям. Хоч цей підхід є дуже зручним для розгортки і накладання двовимірної текстури, для наших цілей цей метод не підходить, бо точність поверхні сильно залежить від частини сфери, в якій ми знаходимося. У полюсах спостерігається велике скупчення точок, коли як на екваторі точність недостатня.
	2)	Наступний тип побудови поверхні сфери – це ікосфера. Це найкращий спосіб рівномірно розподілити точки по сфері, але при цьому ми не маємо зручного підходу для процедурного поділу поверхні на менші елементи.
	3)	Останній спосіб – це кубо-сфера, яка з початку складається з 6 сторін куба, де довжина ребра куба – це діаметр сфери. Хоч він розподілює точки трохи гірше, ніж попередній метод, він є найбільш придатним способом для нашої ситуації, бо для розділу одного квадрату на більш деталізований варіант, нам потрібно взяти чотири квадрати, які рівно в 2 рази менші, ніж поточна сторона. Це і буде метод, який я використовував для побудови поверхні.

-8-8-8- QuadTree структура -8-8-8-

Але відображення великої площини за великої деталізації все одно використовуватиме багато ресурсів пристрою, тож деталізацію потрібно зменшувати в місцях, де вона не доцільна. Наприклад, якщо камера користувача перебуває на поверхні планети, то в найближчому оточенні користувач має бачити карту висот у максимальній деталізації, тоді як на горизонті достатньо використовувати меншу кількість точок навіть без можливості користувача помітити цю заміну. Для реалізації подібної системи деталізації можна використовувати QuadTree.

QuadTree - це структура даних, яка рекурсивно поділяє простір на чотири підрегіони (квадранти) за досягненням певного критерію. Це дозволяє швидко здійснювати пошук та маніпулювання даними у великих двовимірних просторах. 

У нашому випадку, кожна з шести сторін куба може містити або свою карту висот, або 4 карти висот такої ж роздільної здатності, що дає змогу рекурсивно ділити площину в місцях, де це необхідно для коректного відображення поверхні. Максимальну кількість поділів можна обмежити поряд із відстанями від камери, на яких поверхні мають ділитися.

Ця система так само важлива, як і генерація псевдовипадкови шумів, тому що вона дає змогу уникнути використання великої кількості ресурсів пристрою і додає можливість відобразити поверхню від горизонту до горизонту, де за правильного налаштування поділок, користувач не буде здатний помітити заміну деталізації, що додасть реалістичності ландшафту.  

-9-9-9- Математична модель -9-9-9-

Математична модель складається з двох основних наборів формул. Перший набір відповідає за розподілення точок по сфері. Спочатку ми будуємо 6 сторін куба, у кожної з яких є центр та два одиничних вектора, які співпадають з локальними осями координат цих сторін. За допомогою лінійної комбінації цих векторів разом із індексами вершин розділеними на кількість точок по одній вісі координат, ми отримуємо результуючий вектор точки мешу. Далі ми нормалізуємо цей вектор та домножаємо на радіус сфери, отримуючи в результаті поверхню сфери.

Другий набір формул відповідає за імплементацію шуму Перліна. Спочатку нам потрібно виділити комірку шуму розміру S, у вершинах якої і будуть генеруватися градієнт-вектори. Потім ми знаходимо відстані від точки, в якій ми шукаємо значення шуму до кожної з вершин цієї комірки. Після цього нам потрібно знайти 8 скалярних добутків між градієнт-векторами та відстанню між координатою градієнт-вектора та необхідною нам точкою. Результуючі значення цих точек інтерполюються, доки ми не отримаємо одне значення, яке і буде нашим результатом

-10-10-10- Результат виконання програми -10-10-10-

Результатом виконання програми є карта висот, отримана за допомогою шуму Перліна та QuadTree. На екрані ми можемо бачити варіанти генерації планет з варіацією величин октави шуму, та кількістю октав. Розмальовка мешу виконується за віддаленістю точки від центру планети.

-11-11-11- Висновки -11-11-11-

Результатом виконання цієї роботи став алгоритм побудови карти висот планети, з можливістю вибору величини октави шуму, накладання різних октав одне на одну для отримання більш реалістичних результатів. Алгоритм використовує структуру QuadTree для збільшення резолюції поверхні поруч із спостерігачем. Інша частина мешу, яка знаходиться далеко від спостерігача, залишається з більш простою поверхнею, що дозволяє зосередити ресурки комп'ютера на ділянці поверхні поруч із камерою спостерігача.